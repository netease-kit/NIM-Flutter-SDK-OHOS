

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

NIMFileAttachment _$NIMFileAttachmentFromJson(Map<String, dynamic> json)=>  NIMFileAttachment(      path: json['path'] as String?,
      size: (json['size'] as num?)?.toInt(),
      md5: json['md5'] as String?,
      url: json['url'] as String?,
      base64: json['base64'] as String?,
      displayName: json['name'] as String?,
      extension: json['ext'] as String?,
      expire: (json['expire'] as num?)?.toInt(),
      nosScene: json['sen'] as String? ?? 'defaultIm',
      forceUpload: json['force_upload'] as bool? ?? false,
);

Map<String, dynamic> _$NIMFileAttachmentToJson(NIMFileAttachment instance) => <String, dynamic>{
        if (instance.path case final value?) 'path': value,
        if (instance.url case final value?) 'url': value,
        if (instance.base64 case final value?) 'base64': value,
        'size': instance.size,
        if (instance.md5 case final value?) 'md5': value,
        'name': instance.displayName,
        'ext': instance.extension,
        'expire': instance.expire,
        'sen': instance.nosScene,
        'force_upload': instance.forceUpload,
};

NIMAudioAttachment _$NIMAudioAttachmentFromJson(Map<String, dynamic> json)=>  NIMAudioAttachment(      duration: (json['dur'] as num?)?.toInt(),
      autoTransform: json['autoTransform'] as bool?,
      text: json['text'] as String?,
      path: json['path'] as String?,
      size: (json['size'] as num?)?.toInt(),
      md5: json['md5'] as String?,
      url: json['url'] as String?,
      base64: json['base64'] as String?,
      displayName: json['name'] as String?,
      extension: json['ext'] as String?,
      expire: (json['expire'] as num?)?.toInt(),
      nosScene: json['sen'] as String? ?? 'defaultIm',
      forceUpload: json['force_upload'] as bool? ?? false,
);

Map<String, dynamic> _$NIMAudioAttachmentToJson(NIMAudioAttachment instance) => <String, dynamic>{
        if (instance.path case final value?) 'path': value,
        if (instance.url case final value?) 'url': value,
        if (instance.base64 case final value?) 'base64': value,
        'size': instance.size,
        if (instance.md5 case final value?) 'md5': value,
        'name': instance.displayName,
        'ext': instance.extension,
        'expire': instance.expire,
        'sen': instance.nosScene,
        'force_upload': instance.forceUpload,
        'dur': instance.duration,
        'autoTransform': instance.autoTransform,
        'text': instance.text,
};

NIMVideoAttachment _$NIMVideoAttachmentFromJson(Map<String, dynamic> json)=>  NIMVideoAttachment(      duration: (json['dur'] as num?)?.toInt(),
      width: (json['w'] as num?)?.toInt(),
      height: (json['h'] as num?)?.toInt(),
      thumbPath: json['thumbPath'] as String?,
      thumbUrl: json['thumbUrl'] as String?,
      path: json['path'] as String?,
      size: (json['size'] as num?)?.toInt(),
      md5: json['md5'] as String?,
      url: json['url'] as String?,
      base64: json['base64'] as String?,
      displayName: json['name'] as String?,
      extension: json['ext'] as String?,
      expire: (json['expire'] as num?)?.toInt(),
      nosScene: json['sen'] as String? ?? 'defaultIm',
      forceUpload: json['force_upload'] as bool? ?? false,
);

Map<String, dynamic> _$NIMVideoAttachmentToJson(NIMVideoAttachment instance) => <String, dynamic>{
        if (instance.path case final value?) 'path': value,
        if (instance.url case final value?) 'url': value,
        if (instance.base64 case final value?) 'base64': value,
        'size': instance.size,
        if (instance.md5 case final value?) 'md5': value,
        'name': instance.displayName,
        'ext': instance.extension,
        'expire': instance.expire,
        'sen': instance.nosScene,
        'force_upload': instance.forceUpload,
        'dur': instance.duration,
        'w': instance.width,
        'h': instance.height,
        'thumbPath': instance.thumbPath,
        'thumbUrl': instance.thumbUrl,
};

NIMImageAttachment _$NIMImageAttachmentFromJson(Map<String, dynamic> json)=>  NIMImageAttachment(      thumbPath: json['thumbPath'] as String?,
      thumbUrl: json['thumbUrl'] as String?,
      width: (json['w'] as num?)?.toInt(),
      height: (json['h'] as num?)?.toInt(),
      path: json['path'] as String?,
      base64: json['base64'] as String?,
      size: (json['size'] as num?)?.toInt(),
      md5: json['md5'] as String?,
      url: json['url'] as String?,
      displayName: json['name'] as String?,
      extension: json['ext'] as String?,
      expire: (json['expire'] as num?)?.toInt(),
      nosScene: json['sen'] as String? ?? 'defaultIm',
      forceUpload: json['force_upload'] as bool? ?? false,
);

Map<String, dynamic> _$NIMImageAttachmentToJson(NIMImageAttachment instance) => <String, dynamic>{
        if (instance.path case final value?) 'path': value,
        if (instance.url case final value?) 'url': value,
        if (instance.base64 case final value?) 'base64': value,
        'size': instance.size,
        if (instance.md5 case final value?) 'md5': value,
        'name': instance.displayName,
        'ext': instance.extension,
        'expire': instance.expire,
        'sen': instance.nosScene,
        'force_upload': instance.forceUpload,
        if (instance.thumbPath case final value?) 'thumbPath': value,
        if (instance.thumbUrl case final value?) 'thumbUrl': value,
        'w': instance.width,
        'h': instance.height,
};

NIMLocationAttachment _$NIMLocationAttachmentFromJson(Map<String, dynamic> json)=>  NIMLocationAttachment(      latitude: (json['lat'] as num).toDouble(),
      longitude: (json['lng'] as num).toDouble(),
      address: json['title'] as String,
);

Map<String, dynamic> _$NIMLocationAttachmentToJson(NIMLocationAttachment instance) => <String, dynamic>{
        'lat': instance.latitude,
        'lng': instance.longitude,
        'title': instance.address,
};

NIMChatroomNotificationAttachment _$NIMChatroomNotificationAttachmentFromJson(Map<String, dynamic> json)=>  NIMChatroomNotificationAttachment(      type: (json['type'] as num).toInt(),
      targets: (json['targets'] as List<dynamic>?)?.map((e) => e as String).toList(),
      targetNicks: (json['targetNicks'] as List<dynamic>?)?.map((e) => e as String).toList(),
      operator: json['operator'] as String?,
      operatorNick: json['operatorNick'] as String?,
      extension: castPlatformMapToDartMap(json['extension'] as Map?),
);

Map<String, dynamic> _$NIMChatroomNotificationAttachmentToJson(NIMChatroomNotificationAttachment instance) => <String, dynamic>{
        'type': instance.type,
        'targets': instance.targets,
        'targetNicks': instance.targetNicks,
        'operator': instance.operator,
        'operatorNick': instance.operatorNick,
        'extension': instance.extension,
};

NIMChatroomMemberInAttachment _$NIMChatroomMemberInAttachmentFromJson(Map<String, dynamic> json)=>  NIMChatroomMemberInAttachment(      muted: json['muted'] as bool? ?? false,
      tempMuted: json['tempMuted'] as bool? ?? false,
      tempMutedDuration: (json['tempMutedDuration'] as num?)?.toInt() ?? 0,
      targets: (json['targets'] as List<dynamic>?)?.map((e) => e as String).toList(),
      targetNicks: (json['targetNicks'] as List<dynamic>?)?.map((e) => e as String).toList(),
      operator: json['operator'] as String?,
      operatorNick: json['operatorNick'] as String?,
      extension: castPlatformMapToDartMap(json['extension'] as Map?),
);

Map<String, dynamic> _$NIMChatroomMemberInAttachmentToJson(NIMChatroomMemberInAttachment instance) => <String, dynamic>{
        'targets': instance.targets,
        'targetNicks': instance.targetNicks,
        'operator': instance.operator,
        'operatorNick': instance.operatorNick,
        'extension': instance.extension,
        'muted': instance.muted,
        'tempMuted': instance.tempMuted,
        'tempMutedDuration': instance.tempMutedDuration,
};

NIMChatroomTempMuteAttachment _$NIMChatroomTempMuteAttachmentFromJson(Map<String, dynamic> json)=>  NIMChatroomTempMuteAttachment(      type: (json['type'] as num).toInt(),
      duration: (json['duration'] as num?)?.toInt() ?? 0,
      targets: (json['targets'] as List<dynamic>?)?.map((e) => e as String).toList(),
      targetNicks: (json['targetNicks'] as List<dynamic>?)?.map((e) => e as String).toList(),
      operator: json['operator'] as String?,
      operatorNick: json['operatorNick'] as String?,
      extension: castPlatformMapToDartMap(json['extension'] as Map?),
);

Map<String, dynamic> _$NIMChatroomTempMuteAttachmentToJson(NIMChatroomTempMuteAttachment instance) => <String, dynamic>{
        'type': instance.type,
        'targets': instance.targets,
        'targetNicks': instance.targetNicks,
        'operator': instance.operator,
        'operatorNick': instance.operatorNick,
        'extension': instance.extension,
        'duration': instance.duration,
};

NIMChatroomQueueChangeAttachment _$NIMChatroomQueueChangeAttachmentFromJson(Map<String, dynamic> json)=>  NIMChatroomQueueChangeAttachment(      type: (json['type'] as num).toInt(),
      queueChangeType: $enumDecode(_$NIMChatroomQueueChangeTypeEnumMap, json['queueChangeType']),
      content: json['content'] as String?,
      key: json['key'] as String?,
      contentMap: castMapToTypeOfStringString(json['contentMap'] as Map?),
      targets: (json['targets'] as List<dynamic>?)?.map((e) => e as String).toList(),
      targetNicks: (json['targetNicks'] as List<dynamic>?)?.map((e) => e as String).toList(),
      operator: json['operator'] as String?,
      operatorNick: json['operatorNick'] as String?,
      extension: castPlatformMapToDartMap(json['extension'] as Map?),
);

Map<String, dynamic> _$NIMChatroomQueueChangeAttachmentToJson(NIMChatroomQueueChangeAttachment instance) => <String, dynamic>{
        'type': instance.type,
        'targets': instance.targets,
        'targetNicks': instance.targetNicks,
        'operator': instance.operator,
        'operatorNick': instance.operatorNick,
        'extension': instance.extension,
        'contentMap': instance.contentMap,
        'queueChangeType': _$NIMChatroomQueueChangeTypeEnumMap[instance.queueChangeType]!,
        'key': instance.key,
        'content': instance.content,
};

const _$NIMChatroomQueueChangeTypeEnumMap = {
  NIMChatroomQueueChangeType.undefined: 'undefined',  NIMChatroomQueueChangeType.offer: 'offer',  NIMChatroomQueueChangeType.poll: 'poll',  NIMChatroomQueueChangeType.drop: 'drop',  NIMChatroomQueueChangeType.partialClear: 'partialClear',  NIMChatroomQueueChangeType.batchUpdate: 'batchUpdate',
};
